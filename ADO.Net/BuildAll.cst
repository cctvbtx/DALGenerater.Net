<%@ CodeTemplate Language="C#" TargetLanguage="Text"  ResponseEncoding="UTF-8"  Debug="True" Description="Template description here." %>
<%@ Property Name="Tables" Type="SchemaExplorer.TableSchemaCollection" Category="Source" %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Default="Com.Sy" Description="The namespace to use for this class" %>
<%@ Property Name="SqlName" Type="String" Category="Context" Default="MySql" Description="Sql Type Name. (MySql,SQLite,MsSql)" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %> 
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Design" %>
<% 
Tables = TableUtilities.FilterTables(Tables);

CodeTemplate entityTemplate = GetCodeTemplate("Entities.cst");
CodeTemplate iBaseDALTemplate = GetCodeTemplate("IBaseDAL.cst");
CodeTemplate iDALTemplate = GetCodeTemplate("IDAL.cst");
CodeTemplate sqlHelperTemplate = GetCodeTemplate("SqlHelper.cst");
CodeTemplate connTemplate = GetCodeTemplate("Conn.cst");
CodeTemplate sqlDALTemplate = GetCodeTemplate("SqlDAL.cst");
CodeTemplate dalFactoryTemplate = GetCodeTemplate("DALFactory.cst");

CreateDirectory(OutputDirectory + "\\Entities\\");
CreateDirectory(OutputDirectory + "\\IDAL\\");
CreateDirectory(OutputDirectory + "\\" + SqlName + "DAL\\");
CreateDirectory(OutputDirectory + "\\FactoryDAL\\");

RenderFileUsingProperties(OutputDirectory+"\\" + SqlName + "DAL\\Conn.cs", true, connTemplate);
RenderFileUsingProperties(OutputDirectory+"\\" + SqlName + "DAL\\" + SqlName + "Helper.cs", true, sqlHelperTemplate);
RenderFileUsingProperties(OutputDirectory+"\\IDAL\\IBaseDAL.cs",true,iBaseDALTemplate);
RenderFileUsingProperties(OutputDirectory+"\\FactoryDAL\\DALFactory.cs",true,dalFactoryTemplate);

for (int i = 0; i < Tables.Count; i++)
{
	if (Tables[i].HasPrimaryKey)
	{
        RenderFileUsingProperties(OutputDirectory+"\\Entities\\"+ GetCaseName(Tables[i].Name)+".cs",true,entityTemplate,Tables[i]);
        RenderFileUsingProperties(OutputDirectory+"\\IDAL\\I"+ GetCaseName(Tables[i].Name)+"DAL.cs",true,iDALTemplate,Tables[i]);
        RenderFileUsingProperties(OutputDirectory+"\\"+ SqlName +"DAL\\"+ GetCaseName(Tables[i].Name)+"DAL.cs",true,sqlDALTemplate,Tables[i]);
        
    }
}
%>

生成文件成功 !!!

Thank you, xsi64@126.com !!!
Good Luck!!!!!!

<script runat="template">

public string GetCaseName(string value)
{
    return value.Substring(0, 1).ToUpper() + value.Substring(1);
}

 #region Output
private string _outputDirectory = String.Empty;

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
[Category("General")]
[Description("The directory to output the results to.")]
[DefaultValue("")]
public string OutputDirectory 
{ 
	get
	{
		if (_outputDirectory.Length == 0)
		{
			return @"D:\temp";
		}
		else
		{
			return _outputDirectory;
		}
	}
	set
	{
		if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
		_outputDirectory = value;
	} 
}
#endregion

#region TableUtilities Class
public class TableUtilities
{
	public static bool SkipTable(TableSchema table)
	{
		return (table.PrimaryKey == null || table.Columns.Count < 2);
	}
	public static TableSchemaCollection FilterTables(TableSchemaCollection tables)
    {			
        TableSchemaCollection filtered = new TableSchemaCollection();
        foreach(TableSchema table in tables) 
        {
            if(!SkipTable(table)) filtered.Add(table);
        }
        return filtered;
    }
}
#endregion

#region Get Template
public  CodeTemplate GetCodeTemplate(string TemplateName)
{		
	CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName+TemplateName); 
	compiler.CodeTemplateInfo.ToString();
	compiler.Compile(); 
	if (compiler.Errors.Count == 0) 
	{ 
		return compiler.CreateInstance();
	} 
	else 
	{ 
		System.Text.StringBuilder errorMessage = new System.Text.StringBuilder();				
		for (int i = 0; i < compiler.Errors.Count; i++) 
		{
			errorMessage.Append(compiler.Errors[i].ToString()).Append("\n");
		} 
		throw new ApplicationException(errorMessage.ToString());
	} 
	      
	return null;
}
#endregion

#region CreateDirectory
public void CreateDirectory(string path){
    if(!Directory.Exists(path)) 
	    Directory.CreateDirectory(path); 
}
#endregion

#region Render File
public void RenderFileUsingProperties(string fullPath, bool overrite, CodeTemplate template)
{
	if( overrite || (!File.Exists(fullPath)) )
	{
		CopyPropertiesTo(template);
		template.SetProperty("NameSpace", NameSpace);
        template.SetProperty("SqlName", SqlName);
		template.RenderToFile(fullPath, overrite);
	}
}

public void RenderFileUsingProperties(string fullPath, bool overrite, CodeTemplate template,TableSchema sourceTable)
{
	if( overrite || (!File.Exists(fullPath)) )
	{
		CopyPropertiesTo(template);
		template.SetProperty("NameSpace", NameSpace);
        template.SetProperty("SqlName", SqlName);
        template.SetProperty("SourceTable",sourceTable);
		template.RenderToFile(fullPath, overrite);
	}
}
#endregion

</script>