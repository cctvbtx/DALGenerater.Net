<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.OutputFileCodeTemplate" ResponseEncoding="utf-8" Description="Generates a very simple business object." %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Default="Com.Sy" Description="The namespace to use for this class" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="SqlName" Type="String" Category="Context" Default="MySql" Description="Sql Type Name. (MySql,SQLite,MsSql)" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.Windows.Forms.Design"%>
<%@ Assembly Name="System.Design" %>
<script runat="template">
public string GetCaseName(string value){
    return value.Substring(0, 1).ToUpper() + value.Substring(1);
}

public string GetTableLeft(){
    string result = "[";
    if(SqlName.ToLower() == "mysql"){
        result = "`";
    }
    return result;
}

public string GetTableRight(){
    string result = "]";
    if(SqlName.ToLower() == "mysql"){
        result = "`";
    }
    return result;
}

public string GetCamelName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
		
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "Guid";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: 
							if(column.NativeType=="date")
								return "DateTime";
							else
								return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	if(column.IsPrimaryKeyMember && column.DataType == DbType.Guid)
	{
	    return "Guid.NewGuid()";
	}
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			//if(column.ExtendedProperties["CS_Default"].Value==null)
				return "string.Empty";
			//else{
			//	string temp = column.ExtendedProperties["CS_Default"].Value.ToString();
			//	if(temp.IndexOf("(N'")==0)
			//		temp = temp.Substring(3);
			//	if(temp.IndexOf("('")==0)
			//		temp = temp.Substring(2);
			//	if(temp.LastIndexOf("')")==temp.Length-2)
			//		temp = temp.Substring(0,temp.Length-2);
			//	return "\"" + temp + "\"";
			//}
		}
		case DbType.Int16:
		case DbType.Int32:
		case DbType.Int64:
			//if(column.ExtendedProperties["CS_Default"].Value==null)
				return "0";
			//else
			//	return column.ExtendedProperties["CS_Default"].Value.ToString().Replace("((","").Replace("))","");
		case DbType.DateTime:
		{
			return "new DateTime(1900,1,1)";
		}
		default:
		{
			return "";
		}
	}
}

public string GetSqlColumnNames()
{
    string result = GetTableLeft() + SourceTable.PrimaryKey.MemberColumns[0].Name + GetTableRight() ;
    for(int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++)
    {
        if(i == SourceTable.NonForeignKeyColumns.Count -1){
            result += SourceTable.NonPrimaryKeyColumns[i].Name;
        }else{
            result += ", " + GetTableLeft() + SourceTable.NonPrimaryKeyColumns[i].Name + GetTableRight();
        }
    }
    return result;
}

public string GetSqlColumnParamsName()
{
    string result = "@"+SourceTable.PrimaryKey.MemberColumns[0].Name;
    for(int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++)
    {
        if(i == SourceTable.NonForeignKeyColumns.Count -1){
            result += SourceTable.NonPrimaryKeyColumns[i].Name;
        }else{
            result += ", @" + SourceTable.NonPrimaryKeyColumns[i].Name;
        }
    }
    return result;
}

public string GetSqlUpdateParams()
{
    string result = string.Empty;
    for(int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++)
    {
        if(i == SourceTable.NonPrimaryKeyColumns.Count -1){
            result += GetTableLeft() + SourceTable.NonPrimaryKeyColumns[i].Name + GetTableRight() + "=@" + SourceTable.NonPrimaryKeyColumns[i].Name;
        }else{
            result += GetTableLeft() + SourceTable.NonPrimaryKeyColumns[i].Name + GetTableRight() + "=@" + SourceTable.NonPrimaryKeyColumns[i].Name+" ,";
        }
    }
    return result;
}
public string GetSqlParamNames()
{
    string result = string.Empty;
    for(int i = 0; i < SourceTable.Columns.Count; i++){
        if(i == SourceTable.Columns.Count - 1 ){
            result += "param"+SourceTable.Columns[i].Name;
        }else{
            result += "param"+SourceTable.Columns[i].Name+", ";
        }
    }
    return result;
}

public string GetSqlNameSpace()
{
    string result = string.Empty;
    if(SqlName.ToLower() == "MySql".ToLower()){
        result = "using MySql.Data.MySqlClient;";
    }else if(SqlName.ToLower() == "SQLite".ToLower()){
        result = "using System.Data.SQLite;";
    }else if(SqlName.ToLower() == "MsSql"){
        result = "using System.Data.SqlClient;";
    }
    return result;
}
</script>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using <%=NameSpace %>.Entities;
using <%=NameSpace %>.IDAL;
<%=GetSqlNameSpace() %>

namespace <%=NameSpace %>.MySqlDAL
{
    /// <summary>
    /// <%=GetCaseName(SourceTable.Name) %>数据库操作类
    /// </summary>
    public class <%=GetCaseName(SourceTable.Name) %>DAL : I<%=GetCaseName(SourceTable.Name) %>DAL
    {
        #region 常量
        public const string INSERT = "INSERT INTO <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%>(<%=GetSqlColumnNames()%>) VALUES(<%=GetSqlColumnParamsName()%>)";
        public const string UPDATE = "UPDATE <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> SET <%=GetSqlUpdateParams()%> WHERE <%=SourceTable.PrimaryKey.MemberColumns[0].Name %>=@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>";
        public const string DELETE = "DELETE FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> WHERE <%=SourceTable.PrimaryKey.MemberColumns[0].Name %>=@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>";
        public const string DELETEALL = "DELETE FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%>";
        public const string DELETEWHERE = "DELETE FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> WHERE {0}";
        public const string SELECT = "SELECT <%=GetSqlColumnNames()%> FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> WHERE {0} ORDER BY {1}";
        public const string SELECTALL = "SELECT <%=GetSqlColumnNames()%> FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> ORDER BY {0}";
        public const string GET = "SELECT <%=GetSqlColumnNames()%> FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> WHERE <%=SourceTable.PrimaryKey.MemberColumns[0].Name %>=@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>";
        public const string COUNTALL = "SELECT COUNT(-1) FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%>";
        public const string COUNT = "SELECT COUNT(-1) FROM <%=GetTableLeft() %><%=SourceTable%><%=GetTableRight()%> WHERE {0}";
        #endregion
        
        #region 构造函数
        public <%=GetCaseName(SourceTable.Name) %>DAL()
        { }
        #endregion
        
        #region 方法
        /// <summary>
        /// 增加
        /// </summary>
        /// <param name="<%=GetCamelName(SourceTable.Name) %>"></param>
        /// <returns>受影响行数</returns>
        public int Insert(<%=GetCaseName(SourceTable.Name) %> <%=GetCamelName(SourceTable.Name) %>)
        {
            int result = 0;
            if(<%=GetCamelName(SourceTable.Name) %> == null)
            {
                return result;
            }
            
            <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
            <%=SqlName %>Parameter param<%=SourceTable.Columns[i].Name %> = new <%=SqlName %>Parameter("@<%=SourceTable.Columns[i].Name %>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
            <% } %>
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteNonQuery(INSERT, <%=GetSqlParamNames()%>);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            
            return result;
        }
        
        /// <summary>
        /// 批量增加新纪录
        /// </summary>
        /// <param name="IList<<%=GetCamelName(SourceTable.Name) %>>"></param>
        /// <returns>受影响行数</returns>
        public int Insert(IList<<%=GetCaseName(SourceTable.Name) %>> lists)
        {
            int result = 0;
            if(lists == null || lists.Count == 0)
            {
                return result;
            }
            
            <%=SqlName %>Transaction tran = <%=SqlName %>Helper.<%=SqlName %>Connection.BeginTransaction();
            
            try
            {
                foreach (<%=GetCaseName(SourceTable.Name) %> <%=GetCamelName(SourceTable.Name) %> in lists)
                {
                    <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
                    <%=SqlName %>Parameter param<%=SourceTable.Columns[i].Name%> = new <%=SqlName %>Parameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
                    <% } %>
                    
                    result += <%=SqlName %>Helper.ExecuteNonQuery(tran, INSERT, <%=GetSqlParamNames()%>);
                }
                
                tran.Commit();
            }
            catch(<%=SqlName %>Exception ex)
            {
                tran.Rollback();
                result = 0;
                throw ex;
            }
            
            return result;
        }

        /// <summary>
        /// 增加或更新对象
        /// </summary>
        /// <param name="<%=GetCamelName(SourceTable.Name) %>"></param>
        /// <returns></returns>
        public int InsertOrUpdate(<%=GetCaseName(SourceTable.Name) %> <%=GetCamelName(SourceTable.Name) %>)
        {
            int result = 0;
            if (Count(string.Format("<%=GetTableLeft()%><%=SourceTable.PrimaryKey.MemberColumns[0].Name%><%=GetTableRight()%>='{0}'", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)) == 0)
            {
                result = Insert(<%=GetCamelName(SourceTable.Name) %>);
            }
            else
            {
                result = Update(<%=GetCamelName(SourceTable.Name) %>);
            }
            return result;
        }
        
        /// <summary>
        /// 批量增加或更新对象
        /// </summary>
        /// <param name="IList<<%=GetCamelName(SourceTable.Name) %>>"></param>
        /// <returns>受影响行数</returns>
        public int InsertOrUpdate(IList<<%=GetCaseName(SourceTable.Name) %>> lists)
        {
            int result = 0;
            if(lists == null || lists.Count == 0)
            {
                return result;
            }
            
            <%=SqlName %>Transaction tran = <%=SqlName %>Helper.<%=SqlName %>Connection.BeginTransaction();
            
            try
            {
                foreach (<%=GetCaseName(SourceTable.Name) %> <%=GetCamelName(SourceTable.Name) %> in lists)
                {
                    if (Count(string.Format("<%=GetTableLeft()%><%=SourceTable.PrimaryKey.MemberColumns[0].Name%><%=GetTableRight()%>='{0}'", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)) == 0)
                    {
                        <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
                        <%=SqlName %>Parameter param<%=SourceTable.Columns[i].Name%> = new <%=SqlName %>Parameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
                        <% } %>
                        
                        result += <%=SqlName %>Helper.ExecuteNonQuery(tran, INSERT, <%=GetSqlParamNames()%>);
                    }
                    else
                    {
                        <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
                        <%=SqlName %>Parameter param<%=SourceTable.Columns[i].Name%> = new <%=SqlName %>Parameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
                        <% } %>
                        
                        result += <%=SqlName %>Helper.ExecuteNonQuery(tran, UPDATE, <%=GetSqlParamNames()%>);
                    }
                }
                
                tran.Commit();
            }
            catch(<%=SqlName %>Exception ex)
            {
                tran.Rollback();
                result = 0;
                throw ex;
            }
            
            return result;
        }
        
        /// <summary>
        /// 修改
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Update(<%=GetCaseName(SourceTable.Name) %> <%=GetCamelName(SourceTable.Name) %>)
        {
            int result = 0;
            if(<%=GetCamelName(SourceTable.Name) %> == null)
            {
                return result;
            }
            
            <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
            <%=SqlName %>Parameter param<%=SourceTable.Columns[i].Name%> = new <%=SqlName %>Parameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
            <% } %>
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteNonQuery(UPDATE,<%=GetSqlParamNames()%>);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            
            return result;
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Delete(<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]) %> <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>)
        {
            int result = 0;
            
            <%=SqlName %>Parameter param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %> = new <%=SqlName %>Parameter("@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteNonQuery(DELETE, param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            
            return result;
        }
        
        /// <summary>
        /// 删除满足条件的
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Delete(IList<<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]) %>> <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists)
        {
             int result = 0;
            if (<%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists == null || <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists.Count == 0)
                return result;

            <%=SqlName %>Transaction tran = <%=SqlName %>Helper.<%=SqlName %>Connection.BeginTransaction();
            try
            {
                foreach (<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]) %> <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %> in <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists)
                {
                    <%=SqlName %>Parameter param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %> = new <%=SqlName %>Parameter("@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
                    result += <%=SqlName %>Helper.ExecuteNonQuery(DELETE, param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>);
                }

                tran.Commit();
            }
            catch (<%=SqlName %>Exception ex)
            {
                tran.Rollback();
                result = 0;
                throw ex;
            }

            return result;
        }
        
        /// <summary>
        /// 删除满足条件的
        /// </summary>
        /// <returns>受影响行数</returns>
        public int DeleteAll(string where)
        {
            int result = 0;
            if(string.IsNullOrEmpty(where))
            {
                return result;
            }
            string sql = string.Format(DELETEWHERE, where);
            try
            {
                result = <%=SqlName %>Helper.ExecuteNonQuery(sql);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 删除所有
        /// </summary>
        /// <returns>受影响行数</returns>
        public int DeleteAll()
        {
            int result = 0;
            try
            {
                result = <%=SqlName %>Helper.ExecuteNonQuery(DELETEALL);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="order">排序</param>
        /// <returns>查询的结果</returns>
        public List<<%=GetCaseName(SourceTable.Name) %>> Select(string where, string order = "")
        {
            List<<%=GetCaseName(SourceTable.Name) %>> result = new List<<%=GetCaseName(SourceTable.Name) %>>();
            if(string.IsNullOrEmpty(where))
            {
                where = "1=1";
            }
            if(string.IsNullOrEmpty(order))
            {
                order = "<%=GetTableLeft()%><%=SourceTable.PrimaryKey.MemberColumns[0].Name%><%=GetTableRight()%> DESC";    
            }
            
            string sql = string.Format(SELECT, where, order);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteList<<%=GetCaseName(SourceTable.Name) %>>(sql);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="offset">索引位置</param>
        /// <param name="limit">返回记录数</param>
        /// <param name="order">排序</param>
        /// <returns>查询的结果</returns>
        public List<<%=GetCaseName(SourceTable.Name) %>> Select(string where, int offset, int limit, string order = "")
        {
            List<<%=GetCaseName(SourceTable.Name) %>> result = new List<<%=GetCaseName(SourceTable.Name) %>>();
            if(string.IsNullOrEmpty(where))
            {
                where = "1=1";
            }
            if(string.IsNullOrEmpty(order))
            {
                order = "<%=GetTableLeft()%><%=SourceTable.PrimaryKey.MemberColumns[0].Name%><%=GetTableRight()%> DESC";    
            }
            
            string sql = string.Format(SELECT, where, order) + string.Format(" limit {0},{1}", offset, limit);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteList<<%=GetCaseName(SourceTable.Name) %>>(sql);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询所有记录
        /// </summary>
        /// <param name="order">排序</param>
        /// <returns>查询的结果</returns>
        public List<<%=GetCaseName(SourceTable.Name) %>> SelectAll(string order = "")
        {
            List<<%=GetCaseName(SourceTable.Name) %>> result = new List<<%=GetCaseName(SourceTable.Name) %>>();
            if(string.IsNullOrEmpty(order))
            {
                order = "<%=GetTableLeft()%><%=SourceTable.PrimaryKey.MemberColumns[0].Name%><%=GetTableRight()%> DESC";    
            }
        
            string sql = string.Format(SELECTALL, order);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteList<<%=GetCaseName(SourceTable.Name) %>>(sql);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询所有记录
        /// </summary>
        /// <param name="order">排序</param>
        /// <returns>查询的结果</returns>
        public List<<%=GetCaseName(SourceTable.Name) %>> SelectAll(int offset, int limit, string order = "")
        {
            List<<%=GetCaseName(SourceTable.Name) %>> result = new List<<%=GetCaseName(SourceTable.Name) %>>();
            if(string.IsNullOrEmpty(order))
            {
                order = "<%=GetTableLeft()%><%=SourceTable.PrimaryKey.MemberColumns[0].Name%><%=GetTableRight()%> DESC";    
            }
        
            string sql = string.Format(SELECTALL, order) + string.Format(" limit {0},{1}", offset, limit);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteList<<%=GetCaseName(SourceTable.Name) %>>(sql);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="<%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>"><%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%></param>
        /// <returns>查询的结果</returns>
        public <%=GetCaseName(SourceTable.Name) %> Get(<%=GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]) %> <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>)
        {
            <%=GetCaseName(SourceTable.Name) %> result = null;
            
            <%=SqlName %>Parameter param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %> = new <%=SqlName %>Parameter("@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteEntity<<%=GetCaseName(SourceTable.Name) %>>(GET, param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询记录数
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>记录数</returns>
        public int Count(string where)
        {
            int result = 0;
            if(string.IsNullOrEmpty(where))
            {
                where = "1=1";
            }
            
            string sql = string.Format(COUNT, where);
            
            try
            {
                result = <%=SqlName %>Helper.ExecuteScalar(sql);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        
        
        /// <summary>
        /// 查询所有记录数
        /// </summary>
        /// <returns>记录数</returns>
        public int CountAll()
        {
            int result = 0;
            try
            {
                result = <%=SqlName %>Helper.ExecuteScalar(COUNTALL);
            }
            catch(<%=SqlName %>Exception ex)
            {
                throw ex;
            }
            return result;
        }
        #endregion
    }
}