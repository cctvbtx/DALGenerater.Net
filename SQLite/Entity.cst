<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.OutputFileCodeTemplate" ResponseEncoding="utf-8" Description="Generates a very simple business object." %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Default="Com.Sy" Description="The namespace to use for this class" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.Windows.Forms.Design"%>
<%@ Assembly Name="System.Design" %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace <%= NameSpace %>.Entity
{
    /// <summary>
    /// <%= GetClassName(SourceTable)%>实体类
    /// </summary>
	[Serializable]
	public class <%= GetClassName(SourceTable)%>
	{
		#region 变量定义
		<% foreach (ColumnSchema column in SourceTable.Columns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
		<% foreach(TableKeySchema foreignKey in SourceTable.ForeignKeys) {%>
		<%= GetParentTableVariableDeclarationStatement(foreignKey) %>
		<% } %>
		<% foreach(TableSchema table in SourceTable.Database.Tables){ 
			foreach(TableKeySchema foreignKey in table.ForeignKeys){
				if ( foreignKey.PrimaryKeyTable.Name == SourceTable.Name ){%>
		<%= GetChildrenTableVariableDeclarationStatement(foreignKey) %>
		<% 		}
			}
		}%>		
		#endregion
		
		#region 构造函数
		public <%= GetClassName(SourceTable)%>()
		{
		}

		public <%= GetClassName(SourceTable)%>
		(
			<%= GetConstructorParameters() %>
		)
		{
			<%= GetAssignValue() %>
		}
		#endregion
		
		#region 公共属性
		
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		public <%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%= SourceTable.Columns[i].Name %>
		{
			get {return this.<%= GetMemberVariableName(SourceTable.Columns[i]) %>;}
			set {this.<%= GetMemberVariableName(SourceTable.Columns[i]) %> = value;}
		}
		<% if (i < SourceTable.Columns.Count - 1) Response.Write("\r\n"); %>	
		<%}%>
		<% foreach(TableKeySchema foreignKey in SourceTable.ForeignKeys) {%>
		public <%= GetCSharpVariableType(foreignKey.PrimaryKeyTable) %> <%= foreignKey.PrimaryKeyTable.Name %>
		{
			get {return this.<%= GetMemberVariableName(foreignKey.PrimaryKeyTable) %>;}
			set {this.<%= GetMemberVariableName(foreignKey.PrimaryKeyTable) %> = value;}
		}
		<% } %>
		<% foreach(TableSchema table in SourceTable.Database.Tables){ 
			foreach(TableKeySchema foreignKey in table.ForeignKeys){
				if ( foreignKey.PrimaryKeyTable.Name == SourceTable.Name ){%>
		public List< <%= GetCSharpVariableType(foreignKey.ForeignKeyTable) %> > <%= foreignKey.ForeignKeyTable.Name %>
		{
			get {return this.<%= GetMemberVariableName(foreignKey.ForeignKeyTable) %>;}
			set {this.<%= GetMemberVariableName(foreignKey.ForeignKeyTable) %> = value;}
		}
		<% 		}
			}
		}%>		
		#endregion
		
		#region 重写的方法
		public override bool Equals(object obj)
        {
            bool result = false;
            if (obj is <%= GetClassName(SourceTable)%>)
            {
                result = (obj as <%= GetClassName(SourceTable)%>).<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Column)%> == this.<%=GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0].Column)%>;
            }
            return result;
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
		#endregion
	}
}
<script runat="template">
#region script
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public string GetParentTableVariableDeclarationStatement(TableKeySchema foreignKey)
{
	return GetParentTableVariableDeclarationStatement("private",foreignKey.PrimaryKeyTable);
}

public string GetChildrenTableVariableDeclarationStatement(TableKeySchema foreignKey)
{
	return GetChildrenTableVariableDeclarationStatement("private",foreignKey.ForeignKeyTable);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetParentTableVariableDeclarationStatement(string protectionLevel, TableSchema parentTable)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(parentTable) + " " + GetMemberVariableName(parentTable);
	
	string defaultValue = "null";
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetChildrenTableVariableDeclarationStatement(string protectionLevel, TableSchema childrenTable)
{
	string statement = protectionLevel + " ";
	statement += "List<" + GetCSharpVariableType(childrenTable) + "> " + GetMemberVariableName(childrenTable);
	
	string defaultValue = "null";
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetConstructorParameters()
{
	string ret = "";
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		if ( column.Name == SourceTable.PrimaryKey.MemberColumns[0].Name )
			continue;
		ret += GetCSharpVariableType(column) + " " + GetCamelCaseName(GetPropertyName(column)) + ",\n\t\t\t";
	}
	return ret.Substring(0, ret.Length - 5);
}

public string GetAssignValue()
{
	string ret = "";
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		if ( column.Name == SourceTable.PrimaryKey.MemberColumns[0].Name )
			continue;
		ret += GetMemberVariableName(column) +  (new String(' ', GetPropertyNameMaxLength() - GetPropertyNameLength(column))) + " = " + GetCamelCaseName(GetPropertyName(column)) + ";\n\t\t\t";
	}
	return ret;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetMemberVariableName(TableSchema table)
{
	//string propertyName = GetPropertyName(column);
	string propertyName = table.Name;
	string memberVariableName = "_" + (propertyName);
	
	return memberVariableName;
}

public string GetMemberVariableName(ColumnSchema column)
{
	//string propertyName = GetPropertyName(column);
	string propertyName = column.Name;
	string memberVariableName = "_" + (propertyName);
	
	return memberVariableName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}

public int GetPropertyNameLength(ColumnSchema column)
{
	return (GetPropertyName(column)).Length;
}

public int GetPropertyNameMaxLength()
{
	int ret = 0;
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		ret = ret < GetPropertyNameLength(column)?GetPropertyNameLength(column):ret;
	}
	return ret;
}
		
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	if(column.IsPrimaryKeyMember && column.DataType == DbType.Guid)
	{
	    return "Guid.NewGuid()";
	}
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			//if(column.ExtendedProperties["CS_Default"].Value==null)
				return "string.Empty";
			//else{
			//	string temp = column.ExtendedProperties["CS_Default"].Value.ToString();
			//	if(temp.IndexOf("(N'")==0)
			//		temp = temp.Substring(3);
			//	if(temp.IndexOf("('")==0)
			//		temp = temp.Substring(2);
			//	if(temp.LastIndexOf("')")==temp.Length-2)
			//		temp = temp.Substring(0,temp.Length-2);
			//	return "\"" + temp + "\"";
			//}
		}
		case DbType.Int16:
		case DbType.Int32:
		case DbType.Int64:
			//if(column.ExtendedProperties["CS_Default"].Value==null)
				return "0";
			//else
			//	return column.ExtendedProperties["CS_Default"].Value.ToString().Replace("((","").Replace("))","");
		case DbType.DateTime:
		{
			return "new DateTime(1900,1,1)";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(TableSchema table)
{
	return GetClassName(table);
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
		
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "Guid";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: 
							if(column.NativeType=="date")
								return "DateTime";
							else
								return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		case DbType.Binary:
		{
			return "GetBytes";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}

public string GetClassName(TableSchema table)
{
	
	if(table==null)
	{
	    return null;
	}
	return table.Name ;
}

public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "date": return "Date";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
		default: return "__UNKNOWN__" + column.NativeType;
	}
}

public string GetPrimaryKeyType(TableSchema table)
{
	if (table.PrimaryKey != null)
	{
		if (table.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}

	public override string GetFileName()
	{
		if ( base.OutputFile.Length == 0 )
			return "";
		return base.OutputFile.Substring(0,base.OutputFile.LastIndexOf(@"\") + 1)  + this.GetClassName(this.SourceTable) + ".cs";
	}

	// Override the OutputFile property and assign our specific settings to it.
	[FileDialogAttribute(FileDialogType.Save, Title="?????", Filter="C# Files (*.cs)|*.cs", DefaultExtension=".cs")]
	public override string OutputFile
	{
		get {return this.GetFileName();}
		set {base.OutputFile = value;}
	}


#endregion script

</script>