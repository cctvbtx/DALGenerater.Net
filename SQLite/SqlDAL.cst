<%@ CodeTemplate Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.OutputFileCodeTemplate" ResponseEncoding="utf-8" Description="Generates a very simple business object." %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Default="Com.Sy" Description="The namespace to use for this class" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="System.Windows.Forms.Design"%>
<%@ Assembly Name="System.Design" %>
<script runat="template">
public string GetSqlParameterStatement(ColumnSchema column)
{
      string param = "@" + column.Name + " " + column.NativeType;
 
      switch (column.DataType)
      {
            case DbType.Decimal:
            {
                  param += "(" + column.Precision + ", " + column.Scale + ")";
                  break;
            }
            default:
            {
                  if (column.Size > 0 
					&& (!( column.NativeType == "ntext"
						|| column.NativeType == "money"
						|| column.NativeType == "int"
						|| column.NativeType == "float"
						|| column.NativeType == "datetime"
						|| column.NativeType == "date"
						|| column.NativeType == "bit"
						|| column.NativeType == "image"
						|| column.NativeType == "bigint"
						|| column.NativeType == "real"
						|| column.NativeType == "smalldatetime"
						|| column.NativeType == "smallint"
						|| column.NativeType == "smallmoney"
						|| column.NativeType == "sql_variant"
						|| column.NativeType == "timestamp"
						|| column.NativeType == "tinyint"
						|| column.NativeType == "uniqueidentifier"
						|| column.NativeType == "xml"
						|| column.NativeType == "text" )) )
                  {
                        param += "(" + column.Size + ")";
                  }
                  break;
            }
      }
 
      return param;
}
public string GetSqlParameterStatementOutput(ColumnSchema column)
{
      string param = GetSqlParameterStatement(column);
 	  if((bool)column.ExtendedProperties["CS_IsIdentity"].Value)
		param += " output";
      return param;
}
public string GetSqlColumnNames()
{
    string result = "["+SourceTable.PrimaryKey.MemberColumns[0].Name+"]";
    for(int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++)
    {
        if(i == SourceTable.NonForeignKeyColumns.Count -1){
            result += SourceTable.NonPrimaryKeyColumns[i].Name;
        }else{
            result += ", [" + SourceTable.NonPrimaryKeyColumns[i].Name+"]";
        }
    }
    return result;
}
public string GetSqlColumnParamsName()
{
    string result = "@"+SourceTable.PrimaryKey.MemberColumns[0].Name;
    for(int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++)
    {
        if(i == SourceTable.NonForeignKeyColumns.Count -1){
            result += SourceTable.NonPrimaryKeyColumns[i].Name;
        }else{
            result += ", @" + SourceTable.NonPrimaryKeyColumns[i].Name;
        }
    }
    return result;
}
public string GetSqlUpdateParams()
{
    string result = string.Empty;
    for(int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++)
    {
        if(i == SourceTable.NonPrimaryKeyColumns.Count -1){
            result += "[" +SourceTable.NonPrimaryKeyColumns[i].Name+"]=@" + SourceTable.NonPrimaryKeyColumns[i].Name;
        }else{
            result += "[" + SourceTable.NonPrimaryKeyColumns[i].Name + "]=@" + SourceTable.NonPrimaryKeyColumns[i].Name+" ,";
        }
    }
    return result;
}
public string GetSqlParamNames()
{
    string result = string.Empty;
    for(int i = 0; i < SourceTable.Columns.Count; i++){
        if(i == SourceTable.Columns.Count - 1 ){
            result += "param"+SourceTable.Columns[i].Name;
        }else{
            result += "param"+SourceTable.Columns[i].Name+", ";
        }
    }
    return result;
}
public string GetCamelName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}
</script>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DBAccess.IDAL;
using Entities.DB;
using System.Data.SQLite;
using System.Data.Common;

namespace <%=NameSpace %>
{
    /// <summary>
    /// <%=SourceTable.Name %>数据库操作类
    /// </summary>
    public class SQLite<%=SourceTable.Name %>DAL : I<%=SourceTable.Name %>DAL
    {
        #region 常量
        public const string INSERT = "INSERT INTO [<%=SourceTable%>](<%=GetSqlColumnNames()%>) VALUES(<%=GetSqlColumnParamsName()%>)";
        public const string UPDATE = "UPDATE [<%=SourceTable%>] SET <%=GetSqlUpdateParams()%> WHERE <%=SourceTable.PrimaryKey.MemberColumns[0].Name %>=@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>";
        public const string DELETE = "DELETE FROM [<%=SourceTable%>] WHERE <%=SourceTable.PrimaryKey.MemberColumns[0].Name %>=@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>";
        public const string DELETEALL = "DELETE FROM [<%=SourceTable%>]";
        public const string DELETEWHERE = "DELETE FROM [<%=SourceTable%>] WHERE {0}";
        public const string SELECT = "SELECT <%=GetSqlColumnNames()%> FROM [<%=SourceTable%>] WHERE {0} ORDER BY {1}";
        public const string SELECTALL = "SELECT <%=GetSqlColumnNames()%> FROM [<%=SourceTable%>] ORDER BY {0}";
        public const string GET = "SELECT <%=GetSqlColumnNames()%> FROM [<%=SourceTable%>] WHERE <%=SourceTable.PrimaryKey.MemberColumns[0].Name %>=@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>";
        public const string COUNTALL = "SELECT COUNT(-1) FROM [<%=SourceTable%>]";
        public const string COUNT = "SELECT COUNT(-1) FROM [<%=SourceTable%>] WHERE {0}";
        #endregion
        
        #region 构造函数
        public SQLite<%=SourceTable.Name %>DAL()
        { }
        #endregion
        
        #region 方法
        /// <summary>
        /// 增加
        /// </summary>
        /// <param name="<%=GetCamelName(SourceTable.Name) %>"></param>
        /// <returns>受影响行数</returns>
        public int Insert(<%=SourceTable.Name %> <%=GetCamelName(SourceTable.Name) %>)
        {
            int result = 0;
            if(<%=GetCamelName(SourceTable.Name) %> == null)
            {
                return result;
            }
            
            <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
            SQLiteParameter param<%=SourceTable.Columns[i].Name%> = new SQLiteParameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
            <% } %>
            
            try
            {
                result = SQLiteHelper.ExecuteNonQuery(INSERT, <%=GetSqlParamNames()%>);
            }catch(DbException ex)
            {
                throw ex;
            }
            
            return result;
        }
        
        /// <summary>
        /// 批量增加新纪录
        /// </summary>
        /// <param name="IList<<%=GetCamelName(SourceTable.Name) %>>"></param>
        /// <returns>受影响行数</returns>
        public int Insert(IList<<%=SourceTable.Name %>> lists)
        {
            int result = 0;
            if(lists == null || lists.Count == 0)
            {
                return result;
            }
            
            SQLiteTransaction tran = SQLiteHelper.SQLiteConnection.BeginTransaction();
            
            try
            {
                foreach (<%=SourceTable.Name %> <%=GetCamelName(SourceTable.Name) %> in lists)
                {
                    <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
                    SQLiteParameter param<%=SourceTable.Columns[i].Name%> = new SQLiteParameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
                    <% } %>
                    
                    result += SQLiteHelper.ExecuteNonQuery(tran, INSERT, <%=GetSqlParamNames()%>);
                }
                
                tran.Commit();
            }catch(DbException ex)
            {
                tran.Rollback();
                result = 0;
                throw ex;
            }
            
            return result;
        }

        /// <summary>
        /// 增加或更新对象
        /// </summary>
        /// <param name="<%=GetCamelName(SourceTable.Name) %>"></param>
        /// <returns></returns>
        public int InsertOrUpdate(<%=SourceTable.Name %> <%=GetCamelName(SourceTable.Name) %>)
        {
            int result = 0;
            if (this.Count(string.Format("[<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>]='{0}'", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)) == 0)
            {
                result = this.Insert(<%=GetCamelName(SourceTable.Name) %>);
            }
            else
            {
                result = this.Update(<%=GetCamelName(SourceTable.Name) %>);
            }
            return result;
        }
        
        /// <summary>
        /// 批量增加或更新对象
        /// </summary>
        /// <param name="IList<<%=GetCamelName(SourceTable.Name) %>>"></param>
        /// <returns>受影响行数</returns>
        public int InsertOrUpdate(IList<<%=SourceTable.Name %>> lists)
        {
            int result = 0;
            if(lists == null || lists.Count == 0)
            {
                return result;
            }
            
            SQLiteTransaction tran = SQLiteHelper.SQLiteConnection.BeginTransaction();
            
            try
            {
                foreach (<%=SourceTable.Name %> <%=GetCamelName(SourceTable.Name) %> in lists)
                {
                    if (this.Count(string.Format("[<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>]='{0}'", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>)) == 0)
                    {
                        <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
                        SQLiteParameter param<%=SourceTable.Columns[i].Name%> = new SQLiteParameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
                        <% } %>
                        
                        result += SQLiteHelper.ExecuteNonQuery(tran, INSERT, <%=GetSqlParamNames()%>);
                    }
                    else
                    {
                        <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
                        SQLiteParameter param<%=SourceTable.Columns[i].Name%> = new SQLiteParameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
                        <% } %>
                        
                        result += SQLiteHelper.ExecuteNonQuery(tran, UPDATE, <%=GetSqlParamNames()%>);
                    }
                }
                
                tran.Commit();
            }catch(DbException ex)
            {
                tran.Rollback();
                result = 0;
                throw ex;
            }
            
            return result;
        }
        
        /// <summary>
        /// 修改
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Update(<%=SourceTable.Name %> <%=GetCamelName(SourceTable.Name) %>)
        {
            int result = 0;
            if(<%=GetCamelName(SourceTable.Name) %> == null)
            {
                return result;
            }
            
            <% for(int i = 0; i < SourceTable.Columns.Count;i++){%>
            SQLiteParameter param<%=SourceTable.Columns[i].Name%> = new SQLiteParameter("@<%=SourceTable.Columns[i].Name%>", <%=GetCamelName(SourceTable.Name) %>.<%=SourceTable.Columns[i].Name%>);
            <% } %>
            
            try
            {
                result = SQLiteHelper.ExecuteNonQuery(UPDATE,<%=GetSqlParamNames()%>);
            }catch(DbException ex)
            {
                throw ex;
            }
            
            return result;
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Delete(Guid <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>)
        {
            int result = 0;
            if(<%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%> == Guid.Empty)
            {
                return result;
            }
            
            SQLiteParameter param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %> = new SQLiteParameter("@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
            
            try
            {
                result = SQLiteHelper.ExecuteNonQuery(DELETE, param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>);
            }catch(DbException ex)
            {
                throw ex;
            }
            
            return result;
        }
        
        /// <summary>
        /// 删除满足条件的
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Delete(IList<Guid> <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists)
        {
             int result = 0;
            if (<%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists == null || <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists.Count == 0)
                return result;

            SQLiteTransaction tran = SQLiteHelper.SQLiteConnection.BeginTransaction();
            try
            {
                foreach (Guid <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %> in <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>Lists)
                {
                    SQLiteParameter param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %> = new SQLiteParameter("@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
                    result += SQLiteHelper.ExecuteNonQuery(DELETE, param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>);
                }

                tran.Commit();
            }
            catch (DbException ex)
            {
                tran.Rollback();
                result = 0;
                throw ex;
            }

            return result;
        }
        
        /// <summary>
        /// 删除满足条件的
        /// </summary>
        /// <returns>受影响行数</returns>
        public int Delete(string where)
        {
            int result = 0;
            if(string.IsNullOrEmpty(where))
            {
                return result;
            }
            string sql = string.Format(DELETEWHERE, where);
            try
            {
                result = SQLiteHelper.ExecuteNonQuery(sql);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 删除所有
        /// </summary>
        /// <returns>受影响行数</returns>
        public int DeleteAll()
        {
            int result = 0;
            try
            {
                result = SQLiteHelper.ExecuteNonQuery(DELETEALL);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <param name="order">排序</param>
        /// <returns>查询的结果</returns>
        public List<<%=SourceTable.Name%>> Select(string where, string order = "")
        {
            List<<%=SourceTable.Name%>> result = new List<<%=SourceTable.Name%>>();
            if(string.IsNullOrEmpty(where))
            {
                where = "1=1";
            }
            if(string.IsNullOrEmpty(order))
            {
                order = "[<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>] DESC";    
            }
            
            string sql = string.Format(SELECT, where, order);
            
            try
            {
                result = SQLiteHelper.ExecuteList<<%=SourceTable.Name%>>(sql);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询所有记录
        /// </summary>
        /// <param name="order">排序</param>
        /// <returns>查询的结果</returns>
        public List<<%=SourceTable.Name%>> SelectAll(string order = "")
        {
            List<<%=SourceTable.Name%>> result = new List<<%=SourceTable.Name%>>();
            if(string.IsNullOrEmpty(order))
            {
                order = "[<%=SourceTable.PrimaryKey.MemberColumns[0].Name%>] DESC";    
            }
        
            string sql = string.Format(SELECTALL, order);
            
            try
            {
                result = SQLiteHelper.ExecuteList<<%=SourceTable.Name%>>(sql);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="<%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>"><%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%></param>
        /// <returns>查询的结果</returns>
        public <%=SourceTable.Name %> Get(Guid <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>)
        {
            <%=SourceTable.Name %> result = null;
            if(<%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name)%> == Guid.Empty)
            {
                return result;
            }
            
            SQLiteParameter param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %> = new SQLiteParameter("@<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>", <%=GetCamelName(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
            
            try
            {
                result = SQLiteHelper.ExecuteEntity<<%=SourceTable.Name%>>(GET, param<%=SourceTable.PrimaryKey.MemberColumns[0].Name %>);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        
        /// <summary>
        /// 查询记录数
        /// </summary>
        /// <param name="where">查询条件</param>
        /// <returns>记录数</returns>
        public int Count(string where)
        {
            int result = 0;
            if(string.IsNullOrEmpty(where))
            {
                where = "1=1";
            }
            
            string sql = string.Format(COUNT, where);
            
            try
            {
                result = SQLiteHelper.ExecuteScalar(sql);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        
        
        /// <summary>
        /// 查询所有记录数
        /// </summary>
        /// <returns>记录数</returns>
        public int CountAll()
        {
            int result = 0;
            try
            {
                result = SQLiteHelper.ExecuteScalar(COUNTALL);
            }catch(DbException ex)
            {
                throw ex;
            }
            return result;
        }
        #endregion
    }
}